리액트공부 3일차 
npx create-react-app 06

cd 06

code .


---
src\App.js

    <div className="App">

    </div>
남기고 안에 태그 다지우기


function App() {
  return (
    <div className="App">

    </div>
  );
}

export default App;




---
xrc\index.js


주석해주기

  // <React.StrictMode>

  // </React.StrictMode>


// reportWebVitals();




import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  // <React.StrictMode>
    <App />
  // </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
// reportWebVitals();










------------------
라우트


라우트에 uri를 넣어놓고 요청, 반환 할 수 있음.




---
src\Components\Home.jsx

/-
기본구조
const Home = ()=>{

}

export default Home;
-/




---
src\Components\About.jsx






---
powershell 하나 열어서
npm install react-router-dom




---
src\App.js



---
src\Components\Home.jsx

const Home = ()=>{

    return (
        <div>
            <nav>
                <ul>
                    <li><a href="/">Home</a></li>
                    <li><a href="/about">About</a></li>
                </ul>
            </nav>
            <h1>HOME</h1>
            <p>Welcome to the Home page!</p>
        </div>
    )
}

export default Home;


---
src\Components\Home.jsx

여러페이지에서 a태그를 쓰다보면 문제가 발생할 수 있다고한다.

import {Link} from 'react-router-dom';

const Home = ()=>{

    return (
        <div>
            <nav>
                <ul>
                    <li><Link to="/">Home</Link></li>
                    <li><Link to="/about">About</Link></li>
                    <li><Link to="/contact">Contact</Link></li>
                </ul>
            </nav>
            <h1>HOME</h1>
            <p>Welcome to the Home page!</p>
        </div>
    )
}

export default Home;



---
src\Components\About.jsx

import {Link} from 'react-router-dom';

const About = () => {
  return (
    <div>
      <nav>
        <ul>
          <li><Link to="/">Home</Link>          </li>
          <li><Link to="/about">About</Link>    </li>
          <li><Link to="/contact">Contact</Link>    </li>
        </ul>
      </nav>
      <h1>About</h1>
      <p>Welcome to the About page!</p>
    </div>
  );
};

export default About;



------------------------------
get형식 파라매터 주고받기
---
src\Components\Contact.jsx

파라매터 던지기 (json형태?)
방법1) a=?name:aaa&age=40


import {Link,useNavigate} from 'react-router-dom';

const Contact = () => {
  const navigate = useNavigate();
  const handleHome = () => {
    console.log("Home");
    navigate("/");
  }
  const handleAbout = () => {
    console.log("About");
    navigate("/about?name=Hong&age=20");
  }
  const handleContact = () => {
    console.log("Contact");
    navigate("/contact");
  }

  return (
    <div>
      <nav>
        <ul>
          <li><button onClick={handleHome}>Home     </button>    </li>
          <li><button onClick={handleAbout}>About    </button>    </li>
          <li><button onClick={handleContact}>CONTACT  </button>    </li>
        </ul>
      </nav>
      <h1>Contact</h1>
      <p>Welcome to the Contact page!</p>
    </div>
  );
};

export default Contact;


---
src\Components\Home.jsx
import {Link} from 'react-router-dom';

const Home = ()=>{

    return (
        <div>
            <nav>
                <ul>
                    <li><Link to="/">Home</Link></li>
                    <li><Link to="/about?name=aaa&age=80">About</Link></li>
                    <li><Link to="/contact">Contact</Link></li>
                </ul>
            </nav>
            <h1>HOME</h1>
            <p>Welcome to the Home page!</p>
        </div>
    )
}

export default Home;



---
src\Components\About.jsx
파라매터 받기

import {Link} from 'react-router-dom';
import {useLocation} from 'react-router-dom';

const About = () => {
    //
    const location = useLocation();
    const query = new URLSearchParams(location.search);
    console.log("query",query);
  return (
    <div>
      <nav>
        <ul>
          <li><Link to="/">Home</Link>          </li>
          <li><Link to="/about">About</Link>    </li>
          <li><Link to="/contact">Contact</Link>    </li>
        </ul>
      </nav>
      <h1>About</h1>
      Param : {query.get("name")},{query.get("age")} <br/>
      <p>Welcome to the About page!</p>
    </div>
  );
};

export default About;



---------
방법2) a/aaa/40

src\App.js


import {BrowserRouter as Router,Routes,Route} from 'react-router-dom'
// BrowserRouter	HTML5의 History API를 사용해서 페이지 이동을 처리함. 보통 최상위에 <Router>로 감쌈.
// Routes	내부에 여러 개의 Route를 포함하는 컨테이너 역할. React 18 이후에는 Switch 대신 Routes 사용.
// Route	특정 경로(path)에 특정 컴포넌트(element)를 매핑함.
import Home from './Components/Home'
import About from './Components/About'
import Contact from './Components/Contact'

function App() {
  return (
    <div className="App">


      <Router>
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/about" element={<About />} />
          <Route path="/contact/:name/:age" element={<Contact />} />
        </Routes>
      </Router>
    </div>
  );
}

export default App;




---
src\Components\Home.jsx

import {Link} from 'react-router-dom';

const Home = ()=>{

    return (
        <div>
            <nav>
                <ul>
                    <li><Link to="/">Home</Link></li>
                    <li><Link to="/about?name=aaa&age=80">About</Link></li>
                    <li><Link to="/contact/Kim/80">Contact</Link></li>
                </ul>
            </nav>
            <h1>HOME</h1>
            <p>Welcome to the Home page!</p>
        </div>
    )
}

export default Home;


---
src\Components\Contact.jsx

import {Link,useNavigate,useParams} from 'react-router-dom';

const Contact = () => {
  const {name,age} = useParams();

  const navigate = useNavigate();
  const handleHome = () => {
    console.log("Home");
    navigate("/");
  }
  const handleAbout = () => {
    console.log("About");
    navigate("/about?name=Hong&age=20");
  }
  const handleContact = () => {
    console.log("Contact");
    navigate("/contact");
  }

  return (
    <div>
      <nav>
        <ul>
          <li><button onClick={handleHome}>Home     </button>    </li>
          <li><button onClick={handleAbout}>About    </button>    </li>
          <li><button onClick={handleContact}>CONTACT  </button>    </li>
        </ul>
      </nav>
      <h1>Contact</h1>
      name : {name} , age : {age} <br/>
      <p>Welcome to the Contact page!</p>
    </div>
  );
};

export default Contact;







------------------
컴포넌트간통신


상위 -> 하위  props

하위 -> 상위 ?  callback함수


C:\정처산기공유\리액트\react_log\02APP>npx create-react-app 07

cd 07

code .


---
src\App.js

    <div className="App">

    </div>
남기고 안에 태그 다지우기


function App() {
  return (
    <div className="App">

    </div>
  );
}

export default App;




---
xrc\index.js


주석해주기

  // <React.StrictMode>

  // </React.StrictMode>


// reportWebVitals();



ctrl + shift + `
npm start



--------
상위 -> 자식 props
---
src\Components\Parent_01.jsx

import {useState} from 'react';
import Son_01 from './Son_01';

//상위컴포넌트 -> 하위컴포넌트(props사용)
const Parent_01 = () => {
    const [name, setName] = useState('홍길동');
    return (
        <div>
            <h1>Parent_01</h1>
            <hr />
            <Son_01 name={name} />
        </div>
    )
}

export default Parent_01;

---
src\Components\Son_01.jsx




//props방법1
// const Son_01 = (props) => {
//     return (
//         <div>
//             <h1>Son_01</h1>
//             <hr />
//             부모로부터 전달된 내용 확인 : {props.name}
//         </div>
//     )
// }

//props방법2
const Son_01 = ({name}) => {
    return (
        <div>
            <h1>Son_01</h1>

            부모로부터 전달된 내용 자식에서 확인 : {name}
        </div>
    )
}

export default Son_01;



------------
자식 -> 부모 


---
src\Components\Parent_01.jsx

import {useState, useEffect} from 'react';
import Son_02 from './Son_02';

//하위컴포넌트 -> 상위컴포넌트(CallBack함수 전달)
const Parent_02 = () => {
    const [name, setName] = useState('홍길동');

    const handleNameChange = (name)=>{
        setName(name);
    }

    // useEffect(()=>{
    //     console.log('부모에서 자식으로 전달된 name값이 변경되었습니다.')
    // },[name])

    return (
        <div>
            <h1>Parent_02</h1>
            부모가 가지는 상태값 : {name} <br />
            <hr />
            <Son_02 name={name} handleNameChange={handleNameChange}/>
        </div>
    )
}

export default Parent_02;


---
src\Components\Son_01.jsx




const Son_02 = ({name,handleNameChange}) => {
    return (
        <div>
            <h1>Son_02</h1>

            부모로부터 전달된 내용을 자식에서 확인 : {name} <br/>
            <input type="text" placeholder='변경할 이름입력' onChange={(e) => {handleNameChange(e.target.value)}} />
            <button>이름변경</button>
        </div>
    )
}

export default Son_02;






----------------------
Context : 전역 저장공간  한시적인?


Local storage - 브라우저에저장, 브라우저를 닫아도 지속됨 (삭제 전까지 영구 저장), 같은 도메인 내에서 공유
Session storage - 브라우저에저장, 브라우저 탭이 닫히면 삭제됨 (세션 기반) , 탭마다 별도저장소


---
src\Components\MyContext.jsx

//Context : 전역으로 공유하고 싶은 데이터를 정의하는 틀(그릇)

import React from 'react';
const AppContext = React.createContext();
export default AppContext;

---
src\Components\MyProvider.jsx
//전역데이터 관리 부분

import {useState} from 'react';
import AppContext from './MyContext';


//Context에 실제 값을 채워주는 역할
//어떤 값을 하위 컴포넌트에게 제공할지 결정
const MyProvider = ({children}) => {
    const [globalState, setGlobalState] = useState('KOREA_01'); //PROVIDER에서 관리하는 상태값
    const value = {globalState,setGlobalState}  // 컴포넌트로 전달하기 위한 객체 생성
    return (
        <AppContext.Provider value={value}>
            {children}
        </AppContext.Provider>
    )

}

export default MyProvider;


---
src\Components\Parent_01.jsx

import {useState,useContext} from 'react';
import Son_01 from './Son_01';
import MyContext from './MyContext';


//상위컴포넌트 -> 하위컴포넌트(props사용)
const Parent_01 = () => {
    const [name, setName] = useState('홍길동');
    const {globalState,setGlobalState} = useContext(MyContext); //PROVIDER에서 관리하는 상태값
    return (
        <div>
            <h1>Parent_01</h1>
            전역변수 : {globalState} <br />
            전역변수 변경 : <button onClick={(e) => {setGlobalState('Parent_01 변경!')}}>변경하기</button>
            <hr />
            <Son_01 name={name} />
        </div>
    )
}

export default Parent_01;

---
src\Components\Parent_02.jsx

// import {useState, useEffect} from 'react';
import Son_02 from './Son_02';
import {useState,useContext} from 'react';
import MyContext from './MyContext';

//하위컴포넌트 -> 상위컴포넌트(CallBack함수 전달)
const Parent_02 = () => {
    const [name, setName] = useState('홍길동');
    const {globalState,setGlobalState} = useContext(MyContext); //PROVIDER에서 관리하는 상태값
    const handleNameChange = (name)=>{
        setName(name);
    }

    // useEffect(()=>{
    //     console.log('부모에서 자식으로 전달된 name값이 변경되었습니다.')
    // },[name])

    return (
        <div>
            <h1>Parent_02</h1>
            부모가 가지는 상태값 : {name} <br />
                        전역변수 : {globalState} <br />
            전역변수 변경 : <button>변경하기</button> <br />
            <hr />
            <Son_02 name={name} handleNameChange={handleNameChange}/>
        </div>
    )
}

export default Parent_02;

---
src\Components\Son_01.jsx

import {useState,useContext} from 'react';
import MyContext from './MyContext';

//props방법1
// const Son_01 = (props) => {
//     return (
//         <div>
//             <h1>Son_01</h1>
//             <hr />
//             부모로부터 전달된 내용 확인 : {props.name}
//         </div>
//     )
// }

//props방법2
const Son_01 = ({name}) => {
    const {globalState,setGlobalState} = useContext(MyContext); //PROVIDER에서 관리하는 상태값
    return (
        <div>
            <h1>Son_01</h1>
            전역변수 : {globalState} <br />
            전역변수 변경 : <button onClick={(e) => {setGlobalState('Son_01 변경!')}}>변경하기</button>
            부모로부터 전달된 내용 자식에서 확인 : {name}
        </div>
    )
}

export default Son_01;


---
src\App.js

import Parent_01 from "./Components/Parent_01";
import Parent_02 from "./Components/Parent_02";
import MyProvider from "./Components/MyProvider";

function App() {
  return (
    <MyProvider>
      <div className="App">
        <h1>부모에서 자식으로 전달</h1>
        <Parent_01 />
        <hr />
        <Parent_02 />
        <hr />
      </div>
    </MyProvider>
  );
}

export default App;








